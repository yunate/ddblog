---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="搜索">
  <div class="search-page">
    <h1 class="search-title">搜索</h1>
    <div class="search-input-container">
      <input 
        type="text" 
        id="searchInput"
        placeholder="搜索你感兴趣的文章"
        class="search-input"
        autocomplete="off"
        spellcheck="false"
        autofocus
      />
    </div>

    <div class="search-results" id="searchResults"></div>
    
    <div class="search-loading" id="searchLoading" style="display: none;">
      <div class="loading-spinner"></div>
      <p>搜索中...</p>
    </div>
  </div>
</BaseLayout>

<style is:global>
  .search-page {
    width: 100%;
    margin: 0 auto;
    padding: 4rem var(--content-gap) 2rem;
    min-height: calc(100vh - var(--header-height) - var(--footer-height));
  }

  .search-title {
    color: var(--text-color);
    margin-bottom: 1.5rem;
    font-size: 2rem;
    font-weight: 600;
    line-height: 1.2;
  }

  .search-input-container {
    display: flex;
    width: 100%;
    background: var(--color-bg);
    border: 1px solid var(--color-border);
    border-radius: 8px;
    overflow: hidden;
    margin-bottom: 2rem;
  }

  .search-input-container:focus-within {
    border-color: var(--color-accent);
  }

  .search-input {
    flex: 1;
    padding: 16px 20px;
    border: none;
    outline: none;
    background: transparent;
    color: var(--text-color);
    font-size: 16px;
    line-height: 1.5;
  }
  .search-input::placeholder {
    color: var(--text-color-muted);
    font-size: 1.05rem;
  }

  .search-results {
    margin-top: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .search-loading {
    text-align: center;
    padding: 3rem 1rem;
    color: var(--text-color-muted);
  }

  .loading-spinner {
    width: 40px;
    height: 40px;
    border: 3px solid var(--color-border);
    border-top: 3px solid var(--color-accent);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 1rem;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .search-no-results {
    text-align: center;
    padding: 4rem 2rem;
    color: var(--text-color-muted);
    background: var(--color-bg);
    border-radius: 8px;
    border: 1px solid var(--color-border);
  }

  .search-no-results h3 {
    color: var(--text-color);
    margin-bottom: 1rem;
    font-size: 1.5rem;
    font-weight: 600;
  }

  .search-no-results p {
    font-size: 1.1rem;
    line-height: 1.6;
  }

  .search-result-item {
    background: var(--color-bg);
    border: 1px solid var(--color-border);
    border-radius: 12px;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    box-shadow: 0 4px 10px rgba(43, 19, 19, 0.05);
    transition: box-shadow 0.3s ease;
    position: relative;
    margin-bottom: 0.5rem;
  }

  .search-result-item:hover {
    box-shadow: 0 6px 16px rgba(28, 28, 28, 0.08);
  }
  
  .search-result-content {
    flex-grow: 1;
  }

  .search-result-title {
    font-size: 1.2rem;
    font-weight: 700;
    margin-bottom: 0.75rem;
    line-height: 1.3;
  }

  .search-result-title a.title-link {
    color: var(--text-color);
    text-decoration: none;
    transition: color 0.2s ease;
    cursor: pointer;
    text-decoration: underline;
  }
  
  .search-result-title a.title-link:hover {
    color: var(--text-color-hover);
    transform: translateY(1px);
    transition: transform 0.5s ease;
  }

  .search-result-excerpt {
    color: var(--text-color-muted);
    line-height: 1.7;
    margin-bottom: 1rem;
    font-size: 1.rem;
  }

  .search-result-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: auto;
    position: relative;
    z-index: 2;
  }
  .search-result-tag {
    color: var(--text-color-hover);
    background-color: var(--tag-bg);
    display: inline-block;
    padding: 0.2rem 0.8rem;
    border-radius: 1rem;
    text-decoration: none;
    font-size: 0.9rem;
    max-width: 200px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    transition: all 0.2s ease;
    position: relative;
    z-index: 10;
  }

  .search-result-tag:hover {
    color: var(--text-color);
    background-color: var(--tag-bg-hover);
    transform: translateY(-1px);
  }

  .search-highlight {
    background: #fef08a;
    color: #92400e;
    padding: 2px 4px;
    border-radius: 4px;
    font-weight: 700;
  }

  :root.dark .search-highlight {
    background: #374151;
    color: #fbbf24;
  }
  
  @media (max-width: 768px) {
    .search-page {
      padding: 2rem var(--small-gap) 1rem;
    }

    .search-title {
      font-size: 1.8rem;
      margin-bottom: 1.5rem;
    }

    .search-input-container {
      border-radius: 8px;
    }
    
    .search-input {
      font-size: 16px;
      padding: 16px 20px;
    }
    
    .search-result-item {
      padding: 1.5rem;
    }

    .search-result-title {
      font-size: 1.2rem;
    }

    .search-result-excerpt {
      font-size: 1rem;
    }

    .search-no-results {
      padding: 2rem 1rem;
    }
  }
</style>

<script type="module">
  const input = document.getElementById('searchInput');
  const results = document.getElementById('searchResults');
  const loading = document.getElementById('searchLoading');

  let posts = [];

  // 从 search-index.json 读取文章数据
  fetch('/search-index.json')
    .then(res => res.json())
    .then(data => { 
      posts = data;
      console.log(`已加载 ${posts.length} 篇文章数据`);
    })
    .catch(err => {
      console.error('加载搜索数据失败:', err);
      results.innerHTML = '<div class="search-no-results"><h3>搜索数据加载失败</h3><p>请刷新页面重试</p></div>';
    });
  
  function showLoading() {
    loading.style.display = 'block';
    results.innerHTML = '';
  }
  
  function hideLoading() {
    loading.style.display = 'none';
  }
  
  function search(keyword) {
    if (!keyword.trim()) {
      results.innerHTML = '';
      hideLoading();
      // 清除URL中的q参数
      const url = new URL(window.location);
      url.searchParams.delete('q');
      window.history.replaceState({}, '', url);
      return;
    }
  
    // 更新URL参数
    const url = new URL(window.location);
    url.searchParams.set('q', keyword.trim());
    window.history.replaceState({}, '', url);
    
    showLoading();
  
    // 模拟搜索延迟，提供更好的用户体验
    setTimeout(() => {
      const keys = keyword.trim().toLowerCase().split(/\s+/);
      const found = posts.filter(post =>
        keys.every(k =>
          (post.title && post.title.toLowerCase().includes(k)) ||
          (post.body && post.body.toLowerCase().includes(k)) ||
          (post.tags && post.tags.join(' ').toLowerCase().includes(k))
        )
      );
  
      hideLoading();
  
      if (!found.length) {
        results.innerHTML = `
          <div class="search-no-results">
            <h3>未找到相关文章</h3>
            <p>尝试使用其他关键词或检查拼写</p>
          </div>
        `;
        return;
      }

      results.innerHTML = found.map(post => `
        <div class="search-result-item">
          <div class="search-result-content">
            <h3 class="search-result-title"><a href="${post.url}" class="title-link">${highlightKeywords(post.title, keys)}</a></h3>
            <p class="search-result-excerpt">${post.body ? highlightKeywords(post.body.slice(0, 200) + '...', keys) : ''}</p>
          </div>
          ${post.tags && post.tags.length ? `
            <div class="search-result-tags">
              ${post.tags.map(t => `<a href="/tags/${t}" class="search-result-tag">${t}</a>`).join('')}
            </div>
          ` : ''}
        </div>
      `).join('');
    }, 300);
  }
  
  function highlightKeywords(text, keywords) {
    if (!text) {
      return ''
    };

    let highlightedText = text;
    keywords.forEach(keyword => {
      const regex = new RegExp(`(${keyword})`, 'gi');
      highlightedText = highlightedText.replace(regex, '<span class="search-highlight">$1</span>');
    });
    return highlightedText;
  }

  // 绑定搜索事件
  input.addEventListener('keydown', e => {
    if (e.key === 'Enter') {
      search(input.value);
    }
  });

  // 实时搜索
  input.addEventListener('input', e => {
    const query = e.target.value;
    if (query.length >= 2) {
      clearTimeout(input.searchTimeout);
      input.searchTimeout = setTimeout(() => search(query), 500);
    } else if (query.length === 0) {
      results.innerHTML = '';
      hideLoading();
    }
  });
  // 页面加载时检查URL参数
  const urlParams = new URLSearchParams(window.location.search);
  const query = urlParams.get('q');
  if (query) {
    input.value = query;
    search(query);
  }
  
  // 如果没有URL参数但需要测试，可以取消下面注释来运行测试搜索
  // setTimeout(() => {
  //   input.value = "test";
  //   search("test");
  // }, 1000);
</script>
